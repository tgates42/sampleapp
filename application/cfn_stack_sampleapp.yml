AWSTemplateFormatVersion: "2010-09-09"
Description: "Deploys an Elastic Load Balancer for Sample Application."
Parameters:

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: Choose which VPC the security groups should be deployed to.

  Subnets:
    Description: Choose which subnets the Load Balancer should be deployed to.
    Type: List<AWS::EC2::Subnet::Id>
 
  AMIImageId:
    Description: Latest Pre-baked AMI.
    AllowedPattern: '^(?:(ami-[a-f0-9]+)?)$'
    Type: String
    
  SchemeType:
    Type: String
    AllowedValues: [ "internal", "internet-facing" ]

Mappings:
  EnvMap:
    ap-southeast-2:
      SampleInstanceName: Sample-Application
      SampleInstanceType: t2.medium
      SampleKeyName: iress-development
      SampleSubnetId: subnet-82a0bee6

Resources:
  SampleLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      VpcId: !Ref VpcId
      GroupDescription: Access to the load balancer that sits in front of Sample Application
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
      Tags: 
        - Key: Name
          Value: !Sub "${AWS::StackName}-LoadBalancers"

  SampleLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      Scheme: !Ref SchemeType
      Instances:
        - Ref: SampleInstance
      Subnets: !Ref Subnets
      HealthCheck:
        Target: 'HTTP:80/'
        HealthyThreshold: '2'
        UnhealthyThreshold: '2'
        Interval: '120'
        Timeout: '60'
      ConnectionDrainingPolicy:
        Enabled: 'true'
        Timeout: '600'
      CrossZone: 'true'
      SecurityGroups: 
        - !Ref SampleLoadBalancerSecurityGroup
      Listeners:
        - LoadBalancerPort: '80'
          InstancePort: '80'
          Protocol: HTTP
      Tags: 
        - Key: Name
          Value: Sample-LoadBalancer

  SampleInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AMIImageId
      InstanceType: !FindInMap [EnvMap, !Ref "AWS::Region", SampleInstanceType]
      KeyName: !FindInMap [EnvMap, !Ref "AWS::Region", SampleKeyName]
      SecurityGroupIds:
        - !Ref SampleSecurityGroup
      SubnetId: !FindInMap [EnvMap, !Ref "AWS::Region", SampleSubnetId]
      UserData: !Base64 |
        #!/bin/bash -x
        sudo yum install -y docker
        sudo service docker start
        sudo usermod -a -G docker ec2-user
      Tags: 
        - Key: Name
          Value: !FindInMap [EnvMap, !Ref "AWS::Region", SampleInstanceName]

  SampleSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      VpcId: !Ref VpcId
      GroupDescription: Access to Sample Application
      SecurityGroupIngress:
        - CidrIp: 10.196.0.0/18
          IpProtocol: -1
        - CidrIp: 172.16.0.0/12
          IpProtocol: -1
      Tags: 
        - Key: Name
          Value: !Sub "${AWS::StackName}-SampleApplication"

Outputs:
  SampleInstance:
    Value: !Ref SampleInstance
    Export:
      Name: !Sub "${AWS::StackName}::SampleInstance"

  SampleLoadBalancer:
    Value: !Ref SampleLoadBalancer
    Export:
      Name: !Sub "${AWS::StackName}::SampleLoadBalancer"

  SampleLoadBalancerUrl:
    Value: !GetAtt SampleLoadBalancer.DNSName
    Export:
      Name: !Sub "${AWS::StackName}::SampleLoadBalancerUrl"

  SampleLoadBalancerSecurityGroup:
    Description: A reference to the security group for Sample load balancers
    Value: !Ref SampleLoadBalancerSecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}::SampleLoadBalancerSecurityGroup"

